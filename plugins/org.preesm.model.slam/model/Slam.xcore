/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2018 - 2019) :
 *
 * Alexandre Honorat [alexandre.honorat@insa-rennes.fr] (2019)
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2018 - 2019)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="Slam", prefix="Slam", modelDirectory="/org.preesm.model.slam/ecore-gen", //	editDirectory="/org.ietr.dftools.architecture.edit/ecore-gen",
//	editorDirectory="/org.ietr.dftools.architecture.editor/ecore-gen",
//	testsDirectory="/org.ietr.dftools.architecture.tests/ecore-gen",
	// redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/model/slam")
package org.preesm.model.slam

import org.eclipse.emf.common.util.ECollections
import org.preesm.model.slam.utils.LexicographicComponentInstanceComparator
import org.preesm.commons.exceptions.PreesmRuntimeException

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String
type int wraps int
type long wraps long
type double wraps double

class Design extends VLNVedElement , ParameterizedElement {
	// URL to the file where this graph is saved
	String url
	contains unordered ComponentInstance[] componentInstances keys instanceName
	contains Link[] links
	contains HierarchyPort[] hierarchyPorts
	container Component refined opposite refinements
	refers ComponentHolder componentHolder

	// COMPONENT RELATED OPERATIONS

	op Component[] getComponents() {
		if (componentHolder !== null) {
			componentHolder.components.unmodifiableView
		} else {
			ECollections.emptyEList
		}
	}
	op Component[] getOperatorComponents() {
		return components.filter[(it instanceof Operator)].toEList.unmodifiableView
	}
	op boolean containsComponent(VLNV name) {
		return components.exists[vlnv.isSame(name)]
	}
	op boolean containsComponent(String vlnvName) {
		return components.exists[vlnvName.equals(it.vlnv.name)]
	}
	op Component getComponent(VLNV name) {
		return components.findFirst[vlnv.isSame(name)]
	}
	op Component getComponent(String vlnvName) {
		return components.findFirst[vlnvName.equals(it.vlnv.name)]
	}

	// COMPONENT INSTANCES RELATED OPERATIONS

	op boolean containsComponentInstance(String name) {
		return componentInstances.exists[instanceName == name]
	}
	op boolean containsComponentInstnace(ComponentInstance instance) {
		return containsComponentInstance(instance.instanceName)
	}
	op ComponentInstance getComponentInstance(String name) {
		return componentInstances.findFirst[instanceName == name]
	}
	op ComponentInstance[] getCommunicationComponentInstances() {
		return componentInstances.filter[(it.component instanceof ComNode)].toEList.unmodifiableView
	}
	op ComponentInstance[] getOperatorComponentInstances() {
		return componentInstances.filter[(it.component instanceof Operator)].toEList.unmodifiableView
	}
	op ComponentInstance[] getOrderedOperatorComponentInstances() {
		return operatorComponentInstances.sortEList(new LexicographicComponentInstanceComparator()).unmodifiableView
	}
	op ComponentInstance[] getComponentInstancesOfType(Component component) {
		componentInstances.filter[component.vlnv.name == it.component.vlnv.name].toEList.unmodifiableView
	}

	// LINK RELATED OPERATIONS

	op Link[] getUndirectedLinks(ComponentInstance c) {
		return links.filter [
			(!it.isDirected) && ((it.destinationComponentInstance.instanceName == c.instanceName) ||
				(it.sourceComponentInstance.instanceName == c.instanceName))
		].toEList.unmodifiableView
	}
	op Link[] getOutgoingDirectedLinks(ComponentInstance c) {
		return links.filter [
			it.isDirected && (it.sourceComponentInstance.instanceName == c.instanceName)
		].toEList.unmodifiableView
	}
	op Link[] getIncomingDirectedLinks(ComponentInstance c) {
		return links.filter [
			it.isDirected && (it.destinationComponentInstance.instanceName == c.instanceName)
		].toEList.unmodifiableView
	}
}

class ComponentInstance extends ParameterizedElement {
	refers Component component opposite instances
	/*
	 * Unique name used to identify the component in the whole architecture.
	 */
	String instanceName
	/*
	 * When several elements of the same type are present in the design,
	 * this hardware ID is used by the codegen to properly set the affinity
	 * or initialize the accelerators.
	 */
	int hardwareId
	op boolean isHierarchical()

	op String toString() {
		return instanceName+":"+component.vlnv.name
	}
}

class VLNVedElement {
	contains VLNV vlnv
}

class ParameterizedElement {
	contains Parameter[] parameters
}

class ComponentHolder {
	contains unordered Component[] components
}

class VLNV {
	String vendor = ""
	String library = ""
	String name = ""
	String version = ""

	op boolean isSame(VLNV other) {
		return this.vendor == other.vendor && this.library == other.library && this.name == other.name && this.version == other.version
	}
}

class Parameter wraps java.util.Map$Entry {
	String key
	String value
}

abstract class Link {
	refers ComInterface sourceInterface
	refers ComInterface destinationInterface
	refers ComponentInstance sourceComponentInstance
	refers ComponentInstance destinationComponentInstance
	String uuid
	boolean directed = "false"

	op ComponentInstance getOtherEnd(ComponentInstance oneEnd) {
		if (sourceComponentInstance.instanceName == oneEnd.instanceName) {
			return destinationComponentInstance;
		} else if (destinationComponentInstance.instanceName == oneEnd.instanceName) {
			return sourceComponentInstance;
		} else {
			throw new PreesmRuntimeException("The given end is not related to this link");
		}
	}
}

class DataLink extends Link {
}

class ControlLink extends Link {
}

class Component extends VLNVedElement , ParameterizedElement {
	contains ComInterface[] interfaces opposite component
	refers ComponentInstance[] instances opposite component
	contains Design[] refinements opposite refined
	op ComInterface getInterface(String name) {
		return interfaces.findFirst[it -> it.name == name]
	}
}

class Operator extends Component {
}

class ComNode extends Component {
	boolean parallel = "true"
	float speed = "1"
}

abstract class Enabler extends Component {
}

class Dma extends Enabler {
	int setupTime = "0"
}

class Mem extends Enabler {
	long size = "1"
}

class HierarchyPort {
	refers ComInterface externalInterface
	refers ComInterface internalInterface
	refers ComponentInstance internalComponentInstance
}

class ComInterface {
	container Component component opposite interfaces
	contains VLNV busType
	id String name = ""
}

/**
 * ROUTES
 */
enum SlamRouteStepType {
  MEM_TYPE, DMA_TYPE, NODE_TYPE
}

class SlamRoute {
	op ComponentInstance getSource() {
		return routeSteps.get(0).source
	}
	op ComponentInstance getTarget() {
		return routeSteps.get(routeSteps.size - 1).target
	}
	// Ordered list of steps. Must not be empty
	contains SlamRouteStep[1..*] routeSteps
}

class SlamRouteStep {
	// Processing Element responsible for forwarding
	refers ComponentInstance source
	refers ComponentInstance target
	// Communication node common to source and target operators used to share the data
	refers ComponentInstance communicationNode
	// Optional enabler to trigger (to send). Null if no enabler are used in this step
	refers ComponentInstance enabler
}
