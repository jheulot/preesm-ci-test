/*
 * Copyright or © or Copr. IETR/INSA - Rennes (2013 - 2019) :
 *
 * Antoine Morvan <antoine.morvan@insa-rennes.fr> (2018)
 * Clément Guy <clement.guy@insa-rennes.fr> (2014)
 * Florian Arrestier <florian.arrestier@insa-rennes.fr> (2017-2019)
 * Hugo Miomandre <hugo.miomandre@insa-rennes.fr> (2017)
 * Julien Heulot <julien.heulot@insa-rennes.fr> (2013 - 2015)
 * Yaset Oliva <yaset.oliva@insa-rennes.fr> (2013 - 2014)
 *
 * Spider is a dataflow based runtime used to execute dynamic PiSDF
 * applications. The Preesm tool may be used to design PiSDF applications.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

/* === Include(s) === */

#include <spider2-application-${appName}.h>

/* === Function(s) definition === */

spider::pisdf::Graph *spider::create${graphName}Subgraph(std::string name) {
    /* == Create the subgraph == */
    auto *graph = spider::api::createSubgraph(spider::pisdf::applicationGraph(),
          /* = Name of the subgraph        = */ std::move(name),
          /* = Number of actors            = */ ${actorCount},
          /* = Number of edges             = */ ${edgeCount},
          /* = Number of parameters        = */ ${paramCount},
          /* = Number of input interfaces  = */ ${inputInterfaceCount},
          /* = Number of output interfaces = */ ${outputInterfaceCount},
          /* = Number of config actors     = */ ${cfgActorCount});
#if( ${parameters.size()} > 0 )

    /* == Creates the parameter(s) == */
#foreach($param in $inheritedParameters)
    auto *param_$param.name = spider::api::createInheritedParam(graph, 
          /* = Name of the parameter        = */ "$param.name", 
          /* = Name of the parent parameter = */ "$param.graphPort.incomingDependency.getter.name");
#end
#foreach($param in $staticParameters)
    auto *param_$param.name = spider::api::createStaticParam(graph, 
          /* = Name of the parameter  = */ "$param.name", 
          /* = Value of the parameter = */  $param.expression.expressionAsString);
#end
#foreach($param in $dependendStaticParameters)
    auto *param_$param.name = spider::api::createStaticParam(graph, 
          /* = Name of the parameter       = */ "$param.name", 
          /* = Expression of the parameter = */ "$param.expression.expressionAsString");
#end
#foreach($param in $dynamicParameters)
    auto *param_$param.name = spider::api::createDynamicParam(graph, 
          /* = Name of the parameter = */ "$param.name");
#end
#foreach($param in $dependentDynamicParameters)
    auto *param_$param.name = spider::api::createDynamicParam(graph, 
          /* = Name of the parameter       = */ "$param.name",  
          /* = Expression of the parameter = */ "$param.expression.expressionAsString");
#end
#end
#if( ${inputInterfaces.size()} > 0 )

    /* == Set the input interface(s) == */
#foreach($interface in $inputInterfaces)
    auto *interface_$interface.name = spider::api::setInputInterfaceName(graph, 
          /* = Index of the interface = */  0, 
          /* = Name of the interface  = */ "$interface.name");
#end
#end
#if( ${outputInterfaces.size()} > 0 )

    /* == Set the output interface(s) == */
#foreach($interface in $outputInterfaces)
    auto *interface_$interface.name = spider::api::setOutputInterfaceName(graph, 
          /* = Index of the interface = */  0, 
          /* = Name of the interface  = */ "$interface.name");
#end
#end
#if( ${actors.size()} > 0 )

    /* == Creates the actor(s) == */
#foreach($actor in $actors)
    auto *vertex_$actor.name = spider::api::createVertex(graph, 
          /* = Name of the actor      = */ "$actor.name", 
          /* = Number of input edges  = */  ${actor.dataInputPorts.size()}, 
          /* = Number of output edges = */  ${actor.dataOutputPorts.size()});
#if( ${actor.configInputPorts.size()} > 0 )
#foreach($param in ${actor.configInputPorts})
    spider::api::addInputParamToVertex(vertex_$actor.name, param_${param.incomingDependency.setter.name});
#end

#end
#end
#end
#if( ${edges.size()} > 0 )

    /* == Creates the edge(s) == */
    ${edges}
#end
#if( ${delays.size()} > 0 )

    /* == Creates the delay(s) == */
    ${delays}
#end

    /* == Return the graph == */
    return graph;
}
