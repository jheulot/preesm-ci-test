/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2014 - 2017) :
 *
 * Antoine Morvan <antoine.morvan@insa-rennes.fr> (2017)
 * Karol Desnos <karol.desnos@insa-rennes.fr> (2014)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
// Split script
sliceHeight = (Height/NbSlice+2*Overlap);
sliceSize = sliceHeight*Width;

for(i=0;i<NbSlice;i++){
	o_output.matchWith(((i+1)%NbSlice)*sliceSize,
	                   i_input,
                       (i*Height/NbSlice-Overlap)*Width,
                       sliceSize);
} 


/*// Old code to test problem detection
 import org.ietr.preesm.experiment.memory.Match;
for(i=0;i<NbSlice;i++){
	for(j=-Overlap; j < Height/NbSlice+Overlap; j++) {
		iLineIdx = i*Height/NbSlice + j;
		
		if(iLineIdx>=0 && iLineIdx < Height){
				iPixelIdx = iLineIdx*Width ;
				oPixelIdx = iPixelIdx + Width + i*2*Overlap*Width;
				o_output.matchWith(oPixelIdx, i_input, iPixelIdx, Width);
		}
	}
} */

  // o_output.matchWith(0,i_input,Height*Width-1,2); // test partially out of range match <= Authorized
  // o_output.matchWith(-1,i_input,Height*Width,1); // fully out of range match
  // o_output.matchWith(-3,i_input,Height*Width-3,6); // Test virtual tokens match detection 
  // o_output.getMatchTable().get(Overlap*Width).add(new Match(o_output,Overlap*Width,i_input, 1, 1)); // Test the non reciprocal match (require the Match import)
  // i_input.matchWith(1,o_output,(Height/NbSlice - Overlap + Overlap)*Width+1,2); // test multiple matches detection 
  // o_output.matchWith(0,o_output, Height*Width+NbSlice*2*Overlap*Width - 1  ); // test inter-input match detection (authorized)
