/*
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  The SysStd System provider is a good one to use for debugging
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
/* --------------------------- XDC ---------------------------------------*/
var System     = xdc.useModule('xdc.runtime.System');
var SysStd     = xdc.useModule('xdc.runtime.SysStd');
var LoggerSys  = xdc.useModule('xdc.runtime.LoggerSys');
var Defaults   = xdc.useModule('xdc.runtime.Defaults');
var Diags      = xdc.useModule('xdc.runtime.Diags');
var Program    = xdc.useModule('xdc.cfg.Program');
var SysMin   = xdc.useModule('xdc.runtime.SysMin');
var Startup  = xdc.useModule('xdc.runtime.Startup');

System.SupportProxy = SysMin;

/* --------------------------- TRACE -------------------------------------*/
var uart       = xdc.useModule('ti.omap.uart.Uartdrv');
SysMin.outputFxn = "&SysMinToTraceBuffer_copy";
Startup.firstFxns.$add("&SysMinToTraceBuffer_init");

/* --------------------------- BIOS --------------------------------------*/
var BIOS          = xdc.useModule('ti.sysbios.BIOS');
var SyncSem       = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Task          = xdc.useModule('ti.sysbios.knl.Task');
var Core          = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
xdc.useModule('ti.sysbios.xdcruntime.Settings');

/* --------------------------- CACHE -------------------------------------*/
var m3Hwi         = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
m3Hwi.enableWA1_1 = false;
m3Hwi.enableException = true;

Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = false;

Program.global.useWA = false;

/* --------------------------- IPC ---------------------------------------*/
var GateMP        = xdc.useModule('ti.sdo.ipc.GateMP');
var Notify        = xdc.useModule('ti.sdo.ipc.Notify');
var MessageQ      = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc           = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP     = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var MultiProc     = xdc.useModule('ti.sdo.utils.MultiProc');
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');
var InterruptDucati = xdc.useModule('ti.sdo.ipc.family.omap4430.InterruptDucati');
var GateHWSpinLock  = xdc.useModule('ti.sdo.ipc.gates.GateHWSpinlock');

var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
Timer.timerSettings[0].baseAddr = 0xA8034000;

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSize     = 2560;
Task.idleTaskStackSize    = 2560;

Notify.numEvents = 32;
Ipc.procSync = Ipc.ProcSync_PAIR;

HeapBufMP.trackAllocs = true;

InterruptDucati.ducatiCtrlBaseAddr = 0x40001000;
InterruptDucati.mailboxBaseAddr    = 0xAA0F4000;
GateHWSpinLock.baseAddr            = 0xAA0F6800;

/* --------------------------- HEAP --------------------------------------*/
var Memory   = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0xA000;
Program.heap           = 0xA000;

/* ------------------------ Power Managment -------------------------------*/
var Power = xdc.useModule('ti.sysbios.family.arm.ducati.omap4430.Power');
var slpm       = xdc.useModule('ti.omap.slpm.slpm');
Power.loadSegment = "MEM_HEAP_SYSM3";
Power.sdmaRegs    = 0xAA056000;

var Idle = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&slpm_idle_processing');

Program.global.SHAREDMEM           = 0xA0000000;
Program.global.SHAREDMEMSIZE       = 0x54000;

var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');

SharedRegion.setEntryMeta(0,
    { base: Program.global.SHAREDMEM,
      len: Program.global.SHAREDMEMSIZE,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      name: "ipc_shm",
    });

/* IPC Shared Memory Map */
Program.global.SHAREDMEM2          = 0xA0054000;
Program.global.SHAREDMEMSIZE2      = 0x000AC000;

SharedRegion.setEntryMeta(1,
    { base: Program.global.SHAREDMEM2,
      len: Program.global.SHAREDMEMSIZE2,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      createHeap: true,
      name: "ipc_shm2",
    });

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSection = ".core1StackSection";
var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
Core.id = 1;

var cfgArgs = prog.build.cfgArgs;

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("AppM3", ["Tesla", "AppM3", "SysM3", "MPU"]);

/* --------------------- IPC Shared Memory Map  ---------------------------*/
for (var i=0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
    });
}

if(cfgArgs.useCache)
{
    print("Unicache = ON");
    Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;
}
else {
    print("Unicache = OFF");
    Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = false;
}

if(cfgArgs.usePM) {
    print("APPM3 Power Mgmt = ON");
}
else {
    print("APPM3 Power Mgmt = OFF");
    for (var i=0; i < MultiProc.numProcessors; i++) {
        Ipc.setEntryMeta({
        remoteProcId: i,
        setupSlpm:false,
        });
    }
}

if(cfgArgs.useWA) {
    Program.global.useWA = cfgArgs.useWA;
    print("Cache workaround 1.1 = ON");
}
else {
    print("Cache workaround 1.1 = OFF");
}

if(Program.global.useWA) {
    var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
    m3Hwi.enableWA1_1 = true;

    Task.addHookSet({
        switchFxn: '&switchHook_wa1_1'
    });
}
else {
    /*enableWA1_1 is false by default but just making sure so that depenency
    on default settings is not created*/
    var m3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
       m3Hwi.enableWA1_1 = false;
}

Program.sectMap[".text"] = "MEM_CODE_APPM3";
Program.sectMap[".codeMemory"] = "MEM_CODE_APPM3";
Program.sectMap[".cinit"] = "MEM_CONST_APPM3";
Program.sectMap[".const"] = "MEM_CODE_APPM3";
Program.sectMap[".pinit"] = "MEM_CONST_APPM3";
Program.sectMap[".args"] = "MEM_CONST_APPM3";
Program.sectMap[".bss"] = "MEM_CONST_APPM3";
Program.sectMap[".neardata"] = "MEM_CONST_APPM3";
Program.sectMap[".rodata"] = "MEM_CONST_APPM3";
Program.sectMap[".sysmem"] = "MEM_CONST_APPM3";
Program.sectMap[".stack"] = "MEM_CODE_APPM3";
Program.sectMap[".plt"] = "MEM_CODE_APPM3";
Program.sectMap[".stackMemory"] = "MEM_CODE_APPM3";
Program.sectMap["__TI_handler_table"] = "MEM_CONST_APPM3";
Program.sectMap[".systemHeap"]  = "MEM_HEAP2_APPM3";
Program.sectMap[".data"] = "MEM_CONST_APPM3";
Program.sectMap[".core1StackSection"] = {loadSegment: "MEM_CODE_APPM3"};

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("AppM3", ["Tesla", "AppM3", "SysM3", "MPU"]);

 /*  Application constants that all three programs use */
Program.global.SYSM3_MESSAGEQNAME   = "MsgQ0";
Program.global.APPM3_MESSAGEQNAME   = "MsgQ1";
Program.global.HEAPNAME             = "Heap0";
Program.global.HEAP_ALIGN           =    128;
Program.global.MSGSIZE              =    256;
Program.global.NUMMSGS              =      4;
Program.global.HEAPID               =      0;
Program.global.NUMLOOPS             =     10;
Program.global.DIEMESSAGE           = 0xFFFF;

/* Task that does the notify sending */
var Task = xdc.useModule('ti.sysbios.knl.Task');
Program.global.tsk1 = Task.create('&tsk1_func');
Program.global.tsk1.instance.name = "tsk1";

/* Create a semaphore with count 0 */
var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
Program.global.semaphore = Semaphore.create(0);
