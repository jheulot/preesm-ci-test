/*
 * Copyright (c) 2012, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: kdesnos (kdesnos@insa-rennes.fr)
// Actor stitch several overlapping slices into one image. 

package org.ietr.sobel.sdf;

actor MergeImage (int NB_SLICES = 16, int WIDTH= 640, int HEIGHT = 480) uint(size=8) slices_in ==> uint(size=8) frame :
	
    // Constant definition - Removed because of strange behavior :
	// Value cannot be different from default in C backend
	// and considered as state variable in Embedded-C backend
	//int FRAME_SIZE = WIDTH*HEIGHT;
	//int SLICE_SIZE = WIDTH*HEIGHT/NB_SLICES + WIDTH*2;
	
	split: action slices_in:[ s_in ] repeat WIDTH*(HEIGHT + NB_SLICES*2) // SLICE_SIZE*NB_SLICES
			==> frame:[ frame_out ] repeat WIDTH*HEIGHT // FRAME_SIZE
	var
		uint(size=8) frame_out [ WIDTH*HEIGHT ],
		int currentSlice,
		int lineToCopy
		
	do
				
		// Merge slices
		// iterate over the lines of the output frame
		foreach int frameLine in 0 .. HEIGHT-1 do
			
			// Compute the "number" of the corresponding slice
			currentSlice := frameLine div (480/NB_SLICES); // integer division
			
			// Get the index of the line to copy
			lineToCopy := frameLine + 1 + 2*currentSlice;
			
			// Copy the line
			foreach int pixel in 0 .. WIDTH-1 do
				frame_out[frameLine*WIDTH + pixel] := s_in[lineToCopy*WIDTH + pixel]; 
			end
		end
	end
end