/**Copyright (c) 2012, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: kdesnos (kdesnos@insa-rennes.fr)
// Actor that retrieves the images from a webcam
// It produces the image on its output in the YUV format

package org.ietr.sobel.sdf;

actor SeparateY (int WIDTH= 640, int HEIGHT = 480) uint(size=8) frame 
	==> uint(size=8) Y:
	
	// Constant definition - Removed because of strange behavior :
	// Value cannot be different from default in C backend
	// and considered as state variable in Embedded-C backend
	//int YUV_FRAME_SIZE = WIDTH*HEIGHT*2;
	//int Y_COMP_SIZE = WIDTH*HEIGHT;
	
	separate: action frame:[ frm_in ] repeat WIDTH*HEIGHT*2 
			==> Y:[ y_out ] repeat WIDTH*HEIGHT
	var
		uint(size=8) y_out [ WIDTH*HEIGHT ]
	do
		foreach int i in 0 .. HEIGHT-1 do
			foreach int j in 0 .. WIDTH-1 do
				y_out[i*WIDTH+j] := frm_in[2*(i*WIDTH+j)]; 
			end
		end
	end

end
