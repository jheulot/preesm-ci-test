/*
 * Copyright (c) 2012, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: kdesnos (kdesnos@insa-rennes.fr)
// Actor that apply the sobel filter to its input. 

package org.ietr.sobel.sdf;

actor SobelFilter (int NB_SLICES = 16, int WIDTH= 640, int HEIGHT = 480)
	uint(size=8) slice_in ==> uint(size=8) slice_out :
	
	// Constant definition - Removed because of strange behavior :
	// Value cannot be different from default in C backend
	// and considered as state variable in Embedded-C backend
	//int SLICE_SIZE = WIDTH*HEIGHT/NB_SLICES + WIDTH*2;
	
	filter: action slice_in:[ s_in ] repeat WIDTH*HEIGHT/NB_SLICES + WIDTH*2 // SLICE_SIZE
			==> slice_out:[ s_out ] repeat WIDTH*HEIGHT/NB_SLICES + WIDTH*2 // SLICE_SIZE
		var
			uint(size=8) s_out [ WIDTH*HEIGHT/NB_SLICES + WIDTH*2 ],
			int SLICE_HEIGHT = HEIGHT/NB_SLICES + 2,
			int(size=32) Gx, // Subresult 1
			int(size=32) Gy  // Subresult 2
		do
			// First and Last columns are filled with 0
			foreach int j in 0 .. SLICE_HEIGHT-1 do
				s_out[j*WIDTH] := 0;
				s_out[j*WIDTH + WIDTH-1] := 0;
			end
			
			// First and Last lines are filled with 0
			// Not necessary since those values will never be used
			//foreach int i in 0 .. WIDTH-1 do
			//	s_out[i] := 0;
			//	s_out[(SLICE_HEIGHT-1)*WIDTH + i] := 0;
			//end			
			
			// Apply the filter to the slice
			
			// Iterate over the pixels of the slice			
			foreach int j in 1 .. SLICE_HEIGHT - 1 do // lines
				foreach int i in 1 .. WIDTH -2 do // columns
					// Compute the convolution with the following matrices :
					//
					//      |-1  0  1|        |-1 -2 -1|
					// Gx = |-2  0  2| & Gy = | 0  0  0|
					//      |-1  0  1|        | 1  2  1|
					//
					Gx := - val(s_in, i-1, j-1) - 2*val(s_in, i-1, j) - val(s_in, i-1, j+1)
						  + val(s_in, i+1, j-1) + 2*val(s_in, i+1, j) + val(s_in, i+1, j+1);
						  
				    Gy := - val(s_in, i-1, j-1) - 2*val(s_in, i, j-1) - val(s_in, i+1, j-1)
						  + val(s_in, i-1, j+1) + 2*val(s_in, i, j+1) + val(s_in, i+1, j+1);
				    
				    // Store the result of abs(Gx)+abs(Gy) in output slice
				    // Normalize the result between 0 and 255
				    s_out[j*WIDTH + i] := (abs(Gx) + abs(Gy)) / 8;   							
				end
			end
		end
		
	// Function that return the value (i,j) of the input array
	// Convert it into a 32 bit integer
	function val(uint(size=8) tab[WIDTH*HEIGHT/NB_SLICES + WIDTH*2],int col, int lin) 
		--> int(size=32) :
		tab[lin*WIDTH + col]
	end 
	
	function abs(int(size=32) x) --> int(size=32) :
		if x < 0 then -x else x end
	end
end