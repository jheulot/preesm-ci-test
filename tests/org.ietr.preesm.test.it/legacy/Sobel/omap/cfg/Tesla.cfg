/* --------------------------- XDC ---------------------------------------*/
var System     = xdc.useModule('xdc.runtime.System');
var SysStd     = xdc.useModule('xdc.runtime.SysStd');
var LoggerSys  = xdc.useModule('xdc.runtime.LoggerSys');
var Defaults   = xdc.useModule('xdc.runtime.Defaults');
var Diags      = xdc.useModule('xdc.runtime.Diags');
var Program    = xdc.useModule('xdc.cfg.Program');
var SysMin     = xdc.useModule('xdc.runtime.SysMin');
var Startup    = xdc.useModule('xdc.runtime.Startup');
System.SupportProxy = SysMin;

/* --------------------------- TRACE -------------------------------------*/
var uart         = xdc.useModule('ti.omap.uart.Uartdrv');
SysMin.outputFxn = "&SysMinToTraceBuffer_copy";
Startup.firstFxns.$add("&SysMinToTraceBuffer_init");

/* --------------------------- BIOS --------------------------------------*/
var BIOS          = xdc.useModule('ti.sysbios.BIOS');
var SyncSem       = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Task          = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
xdc.useModule('ti.sysbios.xdcruntime.Settings');

var ExceptionDSP  = xdc.useModule('ti.sysbios.family.c64p.Exception');


/* --------------------------- CACHE -------------------------------------*/
var Hwi           = xdc.useModule('ti.sysbios.family.c64p.Hwi');

/* --------------------------- IPC ---------------------------------------*/
var GateMP        = xdc.useModule('ti.sdo.ipc.GateMP');
var Notify        = xdc.useModule('ti.sdo.ipc.Notify');
var MessageQ      = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc           = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP     = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var MultiProc     = xdc.useModule('ti.sdo.utils.MultiProc');
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');
var InterruptDsp  = xdc.useModule('ti.sdo.ipc.family.omap4430.InterruptDsp');

Notify.numEvents = 32;

HeapBufMP.trackAllocs = true;

/* --------------------------- HEAP --------------------------------------*/
var Memory   = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0x8000;
Program.heap = 0x8000;

/* ------------------------ Power Managment -------------------------------*/
var slpm       = xdc.useModule('ti.omap.slpm.slpm');

/* Shared Memory Map */
Program.global.SHAREDMEM           = 0x30000000;
Program.global.SHAREDMEMSIZE       = 0x54000;

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: Program.global.SHAREDMEM,
      len:  Program.global.SHAREDMEMSIZE,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      name: "ipc_shm",
    });

/* IPC Shared Memory Map */
Program.global.SHAREDMEM2          = 0x30054000;
Program.global.SHAREDMEMSIZE2      = 0x000AC000;

SharedRegion.setEntryMeta(1,
    { base: Program.global.SHAREDMEM2,
      len: Program.global.SHAREDMEMSIZE2,
      ownerProcId: 3,
      isValid: true,
      cacheEnable: false,
      createHeap: true,
      name: "ipc_shm2",
    });

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSection = ".dspStackSection";

var cfgArgs = prog.build.cfgArgs;

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("Tesla", ["Tesla", "AppM3", "SysM3", "MPU"]);

/* --------------------- IPC Shared Memory Map  ---------------------------*/
var Ipc           = xdc.useModule('ti.sdo.ipc.Ipc');
Ipc.procSync = Ipc.ProcSync_PAIR;
for (var i=0; i < MultiProc.numProcessors; i++) {
    var slpmFlag = true;
    if (i == MultiProc.getIdMeta("MPU")) {
        slpmFlag = false;
        print("Tesla Power Mgmt = OFF");
    }
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupSlpm: slpmFlag,
    });
}

Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = false;
print("Unicache = OFF");

/* Unicache is set to OFF by default 
if(cfgArgs.useCache)
{
    print("Unicache = ON");
    Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;
}
else {
    print("Unicache = OFF");
    Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = false;
}*/


/* Currently setting Slpm to FALSE by default for Tesla, so this block needs to be
 * used when this is relaxed 
if(cfgArgs.usePM) {
    print("Tesla Power Mgmt = ON");
}
else {
    print("Tesla Power Mgmt = OFF");
    for (var i=0; i < MultiProc.numProcessors; i++) {
        Ipc.setEntryMeta({
        remoteProcId: i,
        setupSlpm:false,
        });
    }
}*/


Program.sectMap[".data"] = "MEM_CONST_DSP";
Program.sectMap[".text"] = "MEM_CODE_DSP";
Program.sectMap[".codeMemory"] = "MEM_CODE_DSP";
Program.sectMap[".cinit"] = "MEM_CONST_DSP";
Program.sectMap[".const"] = "MEM_CONST_DSP";
Program.sectMap[".pinit"] = "MEM_CONST_DSP";
Program.sectMap[".args"] = "MEM_CONST_DSP";
Program.sectMap[".bss"] = "MEM_CONST_DSP";
Program.sectMap[".rodata"] = "MEM_CONST_DSP";
Program.sectMap[".neardata"] = "MEM_CONST_DSP";
Program.sectMap[".sysmem"] = "MEM_CONST_DSP";
Program.sectMap[".stack"] = "MEM_CODE_DSP";
Program.sectMap[".stackMemory"] = "MEM_CODE_DSP";
Program.sectMap[".plt"] = "MEM_CODE_DSP";
Program.sectMap[".taskStackSection"] = "MEM_CODE_DSP";
Program.sectMap[".dspStackSection"] = {loadSegment: "MEM_CODE_DSP"};
Program.sectMap[".systemHeap"]  = "MEM_HEAP_DSP";
/*Program.sectMap[".text: { *<copy*>(.text) }"] = "MEM_CODE_DSP";*/

/* Task that does the notify sending */
var Task = xdc.useModule('ti.sysbios.knl.Task');
Program.global.tsk1 = Task.create('&tsk1_func');
Program.global.tsk1.instance.name = "tsk1";

/* Create a semaphore with count 0 */
var Semaphore     = xdc.useModule('ti.sysbios.knl.Semaphore');
Program.global.semaphore = Semaphore.create(0);
