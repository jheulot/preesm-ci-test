
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

MultiProc.setConfig(null/*"CORE1"*/, ["CORE0", "CORE1", "CORE2", "CORE3", "CORE4", "CORE5", "CORE6", "CORE7"]);

xdc.loadPackage ('ti.syslink.ipc.rtos');

/* Load the common configuration */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

/* Load common configuration needed for running all SysLink samples */
var Ipc                     = xdc.useModule('ti.sdo.ipc.Ipc');
var BIOS                    = xdc.useModule('ti.sysbios.BIOS');
var MultiProc               = xdc.useModule('ti.sdo.utils.MultiProc');
var Syslink                 = xdc.useModule ('ti.syslink.ipc.rtos.Syslink');
var Notify                  = xdc.useModule('ti.sdo.ipc.Notify');
var SharedRegion            = xdc.useModule('ti.sdo.ipc.SharedRegion');

xdc.loadPackage ('ti.syslink.ipc.rtos');

/* Set host id */
Ipc.hostProcId = MultiProc.getIdMeta("CORE0");
Ipc.generateSlaveDataForHost = true;


Ipc.procSync = Ipc.ProcSync_PAIR;
/* To avoid wasting shared memory for MessageQ transports */
for (var i=0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
    });
}

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */
SharedRegion.setEntryMeta(0,
    {
      base:        0x0C008000,
      len:         0x000F8000,
      ownerProcId: Ipc.hostProcId,
      isValid:     true,
//      cacheEnable: false,
//      cacheLineSize: 128,
      createHeap: true,
      name:        "shared_region_0",
    });

/*
 *  Application constants that all three programs use.
 */
Program.global.MSGQ_NAME            = "MSGQ_";
Program.global.HEAP_NAME            = "HeapMemMP";
Program.global.HEAP_ALIGN           =   128;
Program.global.HEAP_MSGSIZE         =   128;
Program.global.HEAP_NUMMSGS         =    10;
Program.global.HEAPID               =     0;

/* Number of times to run the loop */
Program.global.NUMLOOPS = 1000;

Memory.defaultHeapSize = 0x8000;
//Program.heap           = 0x80000;

/* Task that does the notify sending */
Program.global.tsk1 = Task.create('&tsk0_func');
Program.global.tsk1.instance.name = "tsk1";
Program.global.tsk1.arg0 = MultiProc.getIdMeta("CORE0");
Program.global.tsk1.stackSize = 0x1000;

/* Don't change the lines below. This is added to fix the location of
 * Ipc_ResetVector to 0x800000
 */
Program.sectMap["ti_sdo_ipc_init"] = new Program.SectionSpec();
Program.sectMap["ti_sdo_ipc_init"].loadAddress = 0x800000;
Program.sectMap["ti_sdo_ipc_init"].type = "NOINIT";

Program.sectMap[".mySharedMem"] = new Program.SectionSpec();
Program.sectMap[".mySharedMem"].loadSegment = "SHARED_NO_CACHE";

Program.sectMap[".MSMCSRAM"] = new Program.SectionSpec();
Program.sectMap[".MSMCSRAM"] = "MSMCSRAM";

/** Const Section */
Program.sectMap[".myConstMem"] = new Program.SectionSpec();
Program.sectMap[".myConstMem"].loadSegment = "SHARED_NO_CACHE";
